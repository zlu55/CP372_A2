test
a 
 bunch
 of 
 struff
 
 adfasfasf
 struffafsafsf
 
 asdffsafasf
 safsafsafs
 sdfsafsadfsa
 
 
 
 sdffsdf
 sdfsdfs
 sdfsdfs
	}else{
						endIndex = MDS * (i + 1);
					}
					for(int index = MDS * i; index < endIndex; index++){
						dataBuff[MDS + index - endIndex] = (byte) fileData.charAt(index);
					}
					dataBuff[MDS] = (byte) (i % 2);
				}else{
					dataBuff = new byte[]{(byte) '\t', (byte) 4};
				}

				System.out.println("Sending Datagram...");
				socket.send(new DatagramPacket(dataBuff, dataBuff.length, InetAddress.getByName(rHost), rPort));
				
				try{
					System.out.println("Receiving ACK... ");
					socket.receive(packet);
					int ackCount = -1;

					for(byte data : packet.getData()) {
						String c = String.valueOf((char) data);
						if (c.equals("0") || c.equals("1") || c.equals("4")){
                            ackCount = Integer.parseInt(c);
						}
                    }
					if(ackCount != i % 2 && ackCount != 4){
						System.out.println("ACK is Invalid, re-sending datagram");
                        i--;
					} else {
                        System.out.println("ACK Received");
                    }
					
				}catch (SocketTimeoutException exception) {
					System.out.println("ACK timed out, re-sending datagram");
					i--;
				}
			} 
			System.out.println("Transfer time: " + (System.currentTimeMillis() - timer) + "ms");
			socket.close();

		}catch(NumberFormatException e){